map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

upstream websocket {
    server goaccess:7890;
}


# ssl-proxy for websocket (=> wss://domain.tld[:port])
server {
    listen 7890 ssl http2;
    listen [::]:7890 ssl http2;

    location / {
        proxy_pass http://websocket;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto $scheme;
        proxy_set_header    Host $http_host;
        proxy_read_timeout  60;
    }
}


# forward http requests to https
server {
    listen 80 default_server;
    listen [::]:80 default_server ipv6only=on;
    server_name _;
    return 301 https://$host$request_uri;
}

server {
    # Enable SSL
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name _;
    root /usr/share/nginx/html;

    #error_log /var/log/nginx/goaccess.error.log warn;
    #access_log /var/log/nginx/goaccess.access.log;

    location / {
        # use BasicAuth to secure the frontend
        proxy_set_header      Authorization "";
        auth_basic            "GoAccess";
        auth_basic_user_file  /etc/nginx/htpasswd;

        # set common proxy headers
        proxy_set_header    Accept-Encoding "";
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto $scheme;
        proxy_set_header    Host $http_host;
        proxy_set_header    Referer $http_referer;
        proxy_read_timeout  60;
    }

}
